THE OBJECT-ORIENTED PARADIGM
=============================
object oriented programming
----------------------------
==>object interacting with one another through method and properties
==>Used to store data,structure application into modules and keeping code clean
    ex:
    var john ={
        name:'john',
        yearOfBirth:1990,
        isMarried:false
    }instances

CONSTRUCTOR
-----------
The constructor act like a blue print,It is used to create instances(objects)  

   Ex: constructor                             INSTANCES                   INSTANCES
       -----------                             ---------                   ---------

       persion                               var john               var mark
        name                                     john                   mark
        yearOfBirth                              1984                   1999
        job                                      teacher                designer
        calculateAge()                           calculateAge()         calculateAge

 INHERITANCE  
 ------------
 Inheritance is an one object basedon another object
 Ex:

       persion                                      
        name                                          
        yearOfBirth                              
        job                                      
        calculateAge()                          Athelet
                                                --------
            |                                   alompics
            |-------------------->              alompicMedal
            |                                   allowedOlympics()
      Athelet                                   name
        alompics                                yearOfBirth                                 
        alompicMedal                            isMarried
        allowedOlympics()                       calculateAge()

SUMMARY
-------
-->Every JavaScript object has a prototype property, which makes Inheritance possible in JavaScript.
-->The prototype propeerty of an object is where we put method and properties that we want other object to Inherit.
-->The constructor's prototype property is NOT the prototype of the constructor itself,it's the prototype of ALL instances that are created through it.
-->whene a certain method(or prototype) is called, the search starts in the object itself,and if it cannot be found, the search moves on to the object's prototype.
   This continues until the method is found :prototype chain;

FUNCTION CONSTRUCTOR
--------------------
ex1:
var Persion  = function(name,yearOfBirth,job){  //object function
    this.name = name;
    this.yearOfBirth = yearOfBirth;
    this.job = job;
}
   
var john = new Persion('john','1990','teacher'); //initialise Persion
ex2:
var john = {
    name:'JOHN',
    yearOfBirth:'1990',
    job:'teacher'
}

var Persion  = function(name,yearOfBirth,job){  //object function
    this.name = name;
    this.yearOfBirth = yearOfBirth;
    this.job = job;

}
**Persion.prototype.calculateAge=function(){  //Inheritance
        console.log(2020-this.yearOfBirth);   
}
**Persion.prototype.lastName="Minaty"  //inheritance
var john = new Persion('JOHN','1990','teacher'); // instatiation persion object
john.calculateAge();


object.create()
-------------
ex1:
var  persionProto = {
    calculateAge:function(){
        console.log(2020-this.yearOfBirth)
    }
}

var john =  Object.create(persionProto); // create object in another way
john.name  = 'john';
john.yearOfBirth = 1992;
john.john = 'teacher';
ex2:
var  persionProto = {
    calculateAge:function(){
        console.log(2020-this.yearOfBirth)
    }
}

var john =  Object.create(persionProto);
john.name  = 'john';
john.yearOfBirth = 1992;
john.john = 'teacher';

john.calculateAge();

var jane  = Object.create(persionProto,{
    name:{value:'jane'},
    yearOfBirth:{value:1995},
    job:{value:'master'}
})

jane.calculateAge()


object.create vs function constructor patern
---------------------------------------------
The "object.create()" bealts an object that direcctly inherite from its parent.
but
The constructor only create object only inherit the prototype of parent and create new object.


premitive vs object
====================
-->number,string,undefind,boolean are premitive and other than that objects
-->variable containing prenitives actually containes hole the data inside the variable itself.
-->variable containing objects actually contains the memory refarance where the object stores.
 ex:1
 var a  = 23;  //primitive type
 var b = a;    //primitive type
 a = 46;

 console.log(a);  //45
 console.log(b);  //23        
                    **Here 'a' and 'b' pointing to two memory location.

ex2:
var obj1 = {        //object type
    name:'jitesh',
    age:43
}

var obj2  = obj1; obj1.age = 11;
console.log(obj1.age); //11  
console.log(obj2.age); //11
                        **Here 'a' and 'b' pointing to same memori location.


 FUNCTION
 --------
 -->A function is an instance of the Object type.
 -->A function behaves like any other object.
 -->We can store a function in a variable.
 -->We can pass a function as an argument to another functin.
 -->We can return a function from a function.

 callback function ex:



var years = [1995,1965,1937,2015,1998];

function arrCalt(arr,fn){
    var arrRes = [];
    for (var i = 0 ; i < arr.length; i++) {
        arrRes.push(fn(arr[i]));
    }
    return arrRes;
}
function calculateAge(el){
    return 2020-el;
}
 var ages = arrCalt(years,calculateAge);

 console.log();

JENERIC FUNCTION
----------------
EX:
function interviewQuestion(job){
    if(job === 'designer'){
        return function(name){
            console.log(name+', can you please explain what UX design is?')
        }
    }
    else if(job === 'teacher'){
        return function(name){
            console.log(name+', what subject do you teach?')
        }
    }
}


var inteQ = interviewQuestion('designer');
inteQ('jitesh'); 
OR
interviewQuestion('designer')('jitesh');

IIFE
----
ex:
(function(){
    var score = 10;
    console.log(score>5);
})()

CLOSER
------
-->An inner function has always access to the variable and parameters of its outer function,
   even after the outer function has return.

